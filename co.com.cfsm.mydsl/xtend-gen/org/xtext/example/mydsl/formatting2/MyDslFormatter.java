/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.formatting2;

import cloud_computing.AmbienteDesplegue;
import cloud_computing.Conexion;
import cloud_computing.Infraestructura;
import cloud_computing.Login;
import cloud_computing.SecurityGroup;
import cloud_computing.Servidor;
import cloud_computing.VPC;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Infraestructura infraestructura, @Extension final IFormattableDocument document) {
    document.<Login>format(infraestructura.getLogins());
    EList<SecurityGroup> _securitygroups = infraestructura.getSecuritygroups();
    for (final SecurityGroup securityGroup : _securitygroups) {
      document.<SecurityGroup>format(securityGroup);
    }
    EList<AmbienteDesplegue> _ambientesdesplegue = infraestructura.getAmbientesdesplegue();
    for (final AmbienteDesplegue ambienteDesplegue : _ambientesdesplegue) {
      document.<AmbienteDesplegue>format(ambienteDesplegue);
    }
  }
  
  protected void _format(final AmbienteDesplegue ambienteDesplegue, @Extension final IFormattableDocument document) {
    EList<VPC> _vpc = ambienteDesplegue.getVpc();
    for (final VPC vPC : _vpc) {
      document.<VPC>format(vPC);
    }
    EList<Servidor> _servidores = ambienteDesplegue.getServidores();
    for (final Servidor servidor : _servidores) {
      document.<Servidor>format(servidor);
    }
    EList<Conexion> _conexion = ambienteDesplegue.getConexion();
    for (final Conexion conexion : _conexion) {
      document.<Conexion>format(conexion);
    }
  }
  
  public void format(final Object ambienteDesplegue, final IFormattableDocument document) {
    if (ambienteDesplegue instanceof XtextResource) {
      _format((XtextResource)ambienteDesplegue, document);
      return;
    } else if (ambienteDesplegue instanceof AmbienteDesplegue) {
      _format((AmbienteDesplegue)ambienteDesplegue, document);
      return;
    } else if (ambienteDesplegue instanceof Infraestructura) {
      _format((Infraestructura)ambienteDesplegue, document);
      return;
    } else if (ambienteDesplegue instanceof EObject) {
      _format((EObject)ambienteDesplegue, document);
      return;
    } else if (ambienteDesplegue == null) {
      _format((Void)null, document);
      return;
    } else if (ambienteDesplegue != null) {
      _format(ambienteDesplegue, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ambienteDesplegue, document).toString());
    }
  }
}
