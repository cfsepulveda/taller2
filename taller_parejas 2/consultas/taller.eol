validateCIDR().println();

validateDB().println();

validateRules().println();

validateDbByProvider().println();



//Punto
operation validateCIDR(): String {
	var isError = false;
	var subredName = "";
	for (subred in Subred.allInstances) {
		var count = 0;

		for (number in subred.cidr.split("\\.")) {
			if (count < 3) {
				if (subred.cidr.split("\\.").size() <>4 or number.asInteger() >= 255) {
					"error".println();
					isError = true;
				}
			}
			count = count++;
		}

		if (subred.cidr.split("\\/").size() <> 2) {
			isError = true;
		} else if (subred.cidr.split("\\/")[1].isInteger() = false) {
			isError = true;
		} else if (subred.cidr.split("\\/")[1].asInteger() > 32) {
			isError = true;
		}
		
		if(isError){
		subredName = subredName + subred.name;
		}

	}

	if (isError) {
		return "no cumple las condiciones necesarias: "+ subredName;
	} else {
		return "No hay errores en CIDR";
	}

}


//Punto 2
operation validateDB(): String {
var isError = false;
var serverName = "";
		for (servidor in ServidorBaseDeDatos.allInstances()) {
		isError = false;
			for (servidor in servidor.servidor) {
				if (servidor.isTypeOf(ServidorAlmacenamiento)) {
					isError = true;
				}
			}
			if(isError){
			serverName = serverName + servidor.nombre + " ";
			}
		}
		
		if(serverName.isEmpty()){
			return "Los servidores de bases de datos no se conectan a ningun servidor de almacenamiento";
		}else{
			return "Error Los servidores de bases de datos: "+serverName+"se conectan a servidores de almacenamiento";
		}
}


//punto 3

operation validateRules(){
	var result = new List<String>();
	var reglas = new List<String>(); 
	reglas.Add(List{"Custom TCP", "TCP", "1024 to 65535"});
	reglas.Add(List{"Custom UDP", "UDP", "1024 to 65535"});
	reglas.Add(List{"DNS UDP", "UDP", "53"});
	reglas.Add(List{"DNS TCP", "TCP", "53"});
	reglas.Add(List{"HTTP", "TCP", "80"});
	reglas.Add(List{"HTTPS", "TCP", "443"});
	reglas.Add(List{"SSH", "TCP", "22"});
	reglas.Add(List{"NFS", "TCP", "2049"});
	reglas.Add(List{"PostgresSQL", "TCP", "5432"});
	reglas.Add(List{"MySQL/Aurora/MariaDB", "TCP", "3306"});
	reglas.Add(List{"POP3", "TCP", "110"});
	reglas.Add(List{"IMAP", "TCP", "143"});
	reglas.Add(List{"LDAP", "TCP", "389"});
	reglas.Add(List{"SMTP", "TCP", "25"});
	reglas.Add(List{"Oracle", "TCP", "1521"});
	
	
	for (rule in Rules.allInstances) {
		for (regla in reglas){
			if(rule.type = regla[0]){
				if(rule.protocol = regla[1] and rule.portRange = regla[2]){
					result.Add("la regla " + rule.type + " esta correcta");
				}
				else{
					result.Add("la regla " + rule.type + " esta correcta");
				}
				
			}
		}
	}
	if (result.size() > 0){
		return result;	
	}
	else{
		return "No se evaluaron reglas";
	}
	
}
//punto 4
operation validateDbByProvider() {
	var isError = false;
	var serverName = "";
	if (Proveedor.allInstances().first().nombre.name = "AWS") {
		for (ambientedesplegue in Proveedor.allInstances().first().ambientedesplegue) {
			for (ambiente in ambientedesplegue) {
				for (servidor in ambiente.servidor) {
					if (servidor.isTypeOf(ServidorBaseDeDatos)) {
						if (servidor.tipo.name = "RELACIONAL") {
							if (servidor.sistemaManejador.name = "PostgreSQL"
								or servidor.sistemaManejador.name = "Oracle"
								or servidor.sistemaManejador.name = "Aurora"
								or servidor.sistemaManejador.name = "MariaDB"
								or servidor.sistemaManejador.name = "SQLServer"
								or servidor.sistemaManejador.name = "MySQL") {} else {
								isError = true;
							}
						} else {
							if (servidor.sistemaManejador.name = "DocumentDB"
								or servidor.sistemaManejador.name = "Dynamo"
								or servidor.sistemaManejador.name = "Cassandra"
								or servidor.sistemaManejador.name = "Redis") {} else {
								isError = true;
							}
						}
						if (isError) {
							serverName = serverName + servidor.nombre + " ";
						}
					}
				}
			}
		}
	} else {

		for (ambientedesplegue in Proveedor.allInstances().first().ambientedesplegue) {
			for (ambiente in ambientedesplegue) {
				for (servidor in ambiente.servidor) {
					if (servidor.isTypeOf(ServidorBaseDeDatos)) {
						if (servidor.tipo.name = "RELACIONAL") {
							if (servidor.sistemaManejador.name = "PostgreSQL"
								or servidor.sistemaManejador.name = "SQLServer"
								or servidor.sistemaManejador.name = "MySQL") {} else {
								isError = true;
							}
						} else {
							if (servidor.sistemaManejador.name = "PostgreSQL"
								or servidor.sistemaManejador.name = "SQLServer"
								or servidor.sistemaManejador.name = "MySQL") {
								isError = true;
							} else {}
						}
						if (isError) {
							serverName = serverName + servidor.nombre + " ";
						}
					}
				}
			}
		}

	}

	if (serverName.isEmpty()) {
		return "todos los servidores de bases de datos cumplen las condiciones";
	} else {
		return "Los servidores de bases de datos : " + serverName + "No cumplen las condiciones";
	}
}

