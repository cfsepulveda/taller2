/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import cloud_computing.AmbienteDesplegue;
import cloud_computing.Cloud_computingPackage;
import cloud_computing.Conexion;
import cloud_computing.Infraestructura;
import cloud_computing.Login;
import cloud_computing.SecurityGroup;
import cloud_computing.ServidorAlmacenamiento;
import cloud_computing.ServidorAplicacion;
import cloud_computing.ServidorBaseDeDatos;
import cloud_computing.Subred;
import cloud_computing.VPC;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Cloud_computingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Cloud_computingPackage.AMBIENTE_DESPLEGUE:
				sequence_AmbienteDesplegue(context, (AmbienteDesplegue) semanticObject); 
				return; 
			case Cloud_computingPackage.CONEXION:
				sequence_Conexion(context, (Conexion) semanticObject); 
				return; 
			case Cloud_computingPackage.INFRAESTRUCTURA:
				sequence_Infraestructura(context, (Infraestructura) semanticObject); 
				return; 
			case Cloud_computingPackage.LOGIN:
				sequence_Login(context, (Login) semanticObject); 
				return; 
			case Cloud_computingPackage.SECURITY_GROUP:
				sequence_SecurityGroup(context, (SecurityGroup) semanticObject); 
				return; 
			case Cloud_computingPackage.SERVIDOR_ALMACENAMIENTO:
				sequence_ServidorAlmacenamiento(context, (ServidorAlmacenamiento) semanticObject); 
				return; 
			case Cloud_computingPackage.SERVIDOR_APLICACION:
				sequence_ServidorAplicacion(context, (ServidorAplicacion) semanticObject); 
				return; 
			case Cloud_computingPackage.SERVIDOR_BASE_DE_DATOS:
				sequence_ServidorBaseDeDatos(context, (ServidorBaseDeDatos) semanticObject); 
				return; 
			case Cloud_computingPackage.SUBRED:
				sequence_Subred(context, (Subred) semanticObject); 
				return; 
			case Cloud_computingPackage.VPC:
				sequence_VPC(context, (VPC) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AmbienteDesplegue returns AmbienteDesplegue
	 *
	 * Constraint:
	 *     (
	 *         alias=EString? 
	 *         tipoAmbiente=Ambiente 
	 *         vpc+=VPC 
	 *         vpc+=VPC* 
	 *         servidores+=Servidor 
	 *         servidores+=Servidor* 
	 *         (conexion+=Conexion conexion+=Conexion*)?
	 *     )
	 */
	protected void sequence_AmbienteDesplegue(ISerializationContext context, AmbienteDesplegue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Conexion returns Conexion
	 *
	 * Constraint:
	 *     (servidor1=[Servidor|EString] servidor2=[Servidor|EString])
	 */
	protected void sequence_Conexion(ISerializationContext context, Conexion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Cloud_computingPackage.Literals.CONEXION__SERVIDOR1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cloud_computingPackage.Literals.CONEXION__SERVIDOR1));
			if (transientValues.isValueTransient(semanticObject, Cloud_computingPackage.Literals.CONEXION__SERVIDOR2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cloud_computingPackage.Literals.CONEXION__SERVIDOR2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConexionAccess().getServidor1ServidorEStringParserRuleCall_4_0_1(), semanticObject.eGet(Cloud_computingPackage.Literals.CONEXION__SERVIDOR1, false));
		feeder.accept(grammarAccess.getConexionAccess().getServidor2ServidorEStringParserRuleCall_8_0_1(), semanticObject.eGet(Cloud_computingPackage.Literals.CONEXION__SERVIDOR2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Infraestructura returns Infraestructura
	 *
	 * Constraint:
	 *     (
	 *         nombreProyecto=EString 
	 *         tipo=ProveedorServicio 
	 *         logins=Login 
	 *         (securitygroups+=SecurityGroup securitygroups+=SecurityGroup*)? 
	 *         (ambientesdesplegue+=AmbienteDesplegue ambientesdesplegue+=AmbienteDesplegue*)?
	 *     )
	 */
	protected void sequence_Infraestructura(ISerializationContext context, Infraestructura semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Login returns Login
	 *
	 * Constraint:
	 *     (nombreConexion=EString? usuario=EString? contrasena=EString? accessId=EString? secret=EString?)
	 */
	protected void sequence_Login(ISerializationContext context, Login semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SecurityGroup returns SecurityGroup
	 *
	 * Constraint:
	 *     (name=EString? description=EString?)
	 */
	protected void sequence_SecurityGroup(ISerializationContext context, SecurityGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Servidor returns ServidorAlmacenamiento
	 *     ServidorAlmacenamiento returns ServidorAlmacenamiento
	 *
	 * Constraint:
	 *     (
	 *         nombre=EString? 
	 *         TamanoM=TamanoMaquina? 
	 *         tamanoInicial=EString? 
	 *         vpc=[VPC|EString] 
	 *         subred=[Subred|EString] 
	 *         serversecuritygroup+=[SecurityGroup|EString]
	 *     )
	 */
	protected void sequence_ServidorAlmacenamiento(ISerializationContext context, ServidorAlmacenamiento semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Servidor returns ServidorAplicacion
	 *     ServidorAplicacion returns ServidorAplicacion
	 *
	 * Constraint:
	 *     (
	 *         nombre=EString 
	 *         TamanoM=TamanoMaquina 
	 *         sistemaO=SistemaOperativo 
	 *         vpc=[VPC|EString] 
	 *         subred=[Subred|EString] 
	 *         serversecuritygroup+=[SecurityGroup|EString]
	 *     )
	 */
	protected void sequence_ServidorAplicacion(ISerializationContext context, ServidorAplicacion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Servidor returns ServidorBaseDeDatos
	 *     ServidorBaseDeDatos returns ServidorBaseDeDatos
	 *
	 * Constraint:
	 *     (
	 *         nombre=EString? 
	 *         TamanoM=TamanoMaquina 
	 *         sistemaManejador=SistemaManejador 
	 *         vpc=[VPC|EString] 
	 *         subred=[Subred|EString] 
	 *         serversecuritygroup+=[SecurityGroup|EString]
	 *     )
	 */
	protected void sequence_ServidorBaseDeDatos(ISerializationContext context, ServidorBaseDeDatos semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subred returns Subred
	 *
	 * Constraint:
	 *     (name=EString? cidr=EString? az=EString?)
	 */
	protected void sequence_Subred(ISerializationContext context, Subred semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VPC returns VPC
	 *
	 * Constraint:
	 *     (name=EString? subred+=Subred)
	 */
	protected void sequence_VPC(ISerializationContext context, VPC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
